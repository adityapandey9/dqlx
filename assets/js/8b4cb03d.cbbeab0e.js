(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[458],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(y,a(a({ref:t},l),{},{components:n})):r.createElement(y,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9770:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return p},default:function(){return l}});var r=n(2122),o=n(9756),s=(n(7294),n(3905)),a={sidebar_position:2},i={unversionedId:"schema/type-generation",id:"schema/type-generation",isDocsHomePage:!1,title:"Type Generation",description:"Using the type generator feature you'll be able to automatically create structs for all of your types defined in the schema.",source:"@site/docs/schema/type-generation.md",sourceDirName:"schema",slug:"/schema/type-generation",permalink:"/dqlx/docs/schema/type-generation",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/schema/type-generation.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Management",permalink:"/dqlx/docs/schema/create-schema"},next:{title:"Security",permalink:"/dqlx/docs/security"}},p=[{value:"Generating Types",id:"generating-types",children:[]}],c={toc:p};function l(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Using the type generator feature you'll be able to automatically create structs for all of your types defined in the schema."),(0,s.kt)("h2",{id:"generating-types"},"Generating Types"),(0,s.kt)("p",null,"At this stage the generator ",(0,s.kt)("strong",{parentName:"p"},"is not")," a fully fledged cli command, hence you'll need to invoke it in your own space."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'schema := dql.NewSchema()\n\nschema.Type("User", func(user *dql.TypeBuilder) {\n    user.String("name")\n    user.String("surname")\n    user.DateTime("birthday")\n    user.Password("password")\n})\n\nschema.Type("Tag", func(tag *dql.TypeBuilder) {\n    tag.String("name")\n    tag.Type("posts", "Post").Reverse()\n})\n\nschema.Type("Post", func(post *dql.TypeBuilder) {\n    post.String("title").Lang()\n    post.String("content")\n    post.Bool("published")\n    post.DateTime("created_at")\n    post.Type("tags", "Tag").Reverse().List()\n    post.Int("views")\n})\n\nerr := dql.GenerateTypes(schema, dql.GeneratorOption{\n    Path:        "your_path/models/models.go",\n    PackageName: "models",\n})\n')),(0,s.kt)("p",null,"It will generate"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// Code auto-generated by dqlx DO NOT EDIT!!\n\npackage models\n\nimport (\n    "time"\n)\n\nvar UserFields = []string{"uid", "User.name", "User.surname", "User.birthday", "User.password", "dgraph.type"}\n\nvar UserType = "User"\n\ntype User struct {\n    Uid      string    `json:"uid,omitempty"`\n    Name     string    `json:"User.name,omitempty"`\n    Surname  string    `json:"User.surname,omitempty"`\n    Birthday time.Time `json:"User.birthday,omitempty"`\n    Password string    `json:"User.password,omitempty"`\n    DType    []string  `json:"dgraph.type,omitempty"`\n}\n\nvar TagFields = []string{"uid", "Tag.name", "dgraph.type"}\nvar TagToPostsEdge = "Tag.posts"\n\nvar TagType = "Tag"\n\ntype Tag struct {\n    Uid   string   `json:"uid,omitempty"`\n    Name  string   `json:"Tag.name,omitempty"`\n    Posts Post     `json:"Tag.posts,omitempty"`\n    DType []string `json:"dgraph.type,omitempty"`\n}\n\nvar PostFields = []string{"uid", "Post.title", "Post.content", "Post.published", "Post.created_at", "Post.views", "dgraph.type"}\nvar PostToTagsEdge = "Post.tags"\n\nvar PostType = "Post"\n\ntype Post struct {\n    Uid       string    `json:"uid,omitempty"`\n    Title     string    `json:"Post.title,omitempty"`\n    Content   string    `json:"Post.content,omitempty"`\n    Published bool      `json:"Post.published,omitempty"`\n    CreatedAt time.Time `json:"Post.created_at,omitempty"`\n    Tags      []Tag     `json:"Post.tags,omitempty"`\n    Views     int64     `json:"Post.views,omitempty"`\n    DType     []string  `json:"dgraph.type,omitempty"`\n}\n')))}l.isMDXComponent=!0}}]);