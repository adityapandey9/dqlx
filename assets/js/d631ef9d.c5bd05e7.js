(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[722],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return t?r.createElement(h,i(i({ref:n},c),{},{components:t})):r.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3413:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var r=t(2122),a=t(9756),l=(t(7294),t(3905)),i={sidebar_position:7},o={unversionedId:"queries/execution",id:"queries/execution",isDocsHomePage:!1,title:"Execution",description:"In this section we'll learn how to execute queries in various modes as well as how we unmarshall the data into a Go structure.",source:"@site/docs/queries/execution.md",sourceDirName:"queries",slug:"/queries/execution",permalink:"/dqlx/docs/queries/execution",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/queries/execution.md",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Query Variables",permalink:"/dqlx/docs/queries/variables"},next:{title:"Multiple Query Blocks",permalink:"/dqlx/docs/queries/multiple-query-blocks"}},s=[{value:"Execute Query",id:"execute-query",children:[]},{value:"Manual Transaction",id:"manual-transaction",children:[]},{value:"Read Only Transaction",id:"read-only-transaction",children:[]},{value:"Unmarshalling",id:"unmarshalling",children:[{value:"Structs",id:"structs",children:[]}]}],u={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In this section we'll learn how to execute queries in various modes as well as how we unmarshall the data into a Go structure.\nWe'll also learn how to execute multiple query blocks"),(0,l.kt)("h2",{id:"execute-query"},"Execute Query"),(0,l.kt)("p",null,"In order to execute a query we must run the ",(0,l.kt)("inlineCode",{parentName:"p"},"Execute")," method.\nEvery time we call ",(0,l.kt)("inlineCode",{parentName:"p"},"Execute")," a new transaction is created, and it is committed upon success."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx)\n')),(0,l.kt)("h2",{id:"manual-transaction"},"Manual Transaction"),(0,l.kt)("p",null,"if you want control over the transaction you can certainly do that.\nWe do that passing ",(0,l.kt)("inlineCode",{parentName:"p"},"dqlx.WithTnx()")," function to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Execute")," method"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'tnx := db.NewTnx()\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx, dqlx.WithTnx(tnx))\n\ntnx.Commit()\n')),(0,l.kt)("h2",{id:"read-only-transaction"},"Read Only Transaction"),(0,l.kt)("p",null,"Similarly, we use ",(0,l.kt)("inlineCode",{parentName:"p"},"WithReadOnly")," if we want to mark this query to be read-only"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx, dqlx.WithReadOnly())\n')),(0,l.kt)("h2",{id:"unmarshalling"},"Unmarshalling"),(0,l.kt)("p",null,"Once the query is executed successfully, we want to grab the result set and Unmarshall it into a go data structure."),(0,l.kt)("p",null,"We can Unmarshall the results by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"Unmarshall")," on the response object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx)\n\nvar data []map[string]interface{}\n\nerr := response.Unmarshall(&data)\n\nif err != nil {\n    panic(err)\n}\n\n// data is now populated!\n')),(0,l.kt)("p",null,"Another way to achieve the same as above but with fewer lines of code is to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"UnmarshallInto")," method during the building phase."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'var data []map[string]interface{}\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    UnmarshallInto(&data)\n    Execute(ctx)\n')),(0,l.kt)("h3",{id:"structs"},"Structs"),(0,l.kt)("p",null,"You can also Unmarshall into well-defined structs, which is usually the recommended way.\nThe marshaller takes in consideration the ",(0,l.kt)("inlineCode",{parentName:"p"},"json:")," tag of the field to automatically map the data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type Animal struct {\n    Uid     string `json:"uid"`\n    Name    string `json:"name"`\n    Species string `json:"species"`\n}\n\nvar animals []Animal\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    UnmarshallInto(&animals)\n    Execute(ctx)\n')))}c.isMDXComponent=!0}}]);