(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[258],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=r.createContext({}),s=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,c=n.parentName,u=o(n,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,l(l({ref:e},u),{},{components:t})):r.createElement(g,l({ref:e},u))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o.mdxType="string"==typeof n?n:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3949:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return c},default:function(){return u}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),l={sidebar_position:1},o={unversionedId:"getting-started/intro",id:"getting-started/intro",isDocsHomePage:!1,title:"Quick Introduction",description:"dqlx is a fully featured Dgraph Schema and Query Builder for Go.",source:"@site/docs/getting-started/intro.md",sourceDirName:"getting-started",slug:"/getting-started/intro",permalink:"/dqlx/docs/getting-started/intro",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/getting-started/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Selection",permalink:"/dqlx/docs/queries/selection"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Connecting",id:"connecting",children:[]},{value:"Inserting Data",id:"inserting-data",children:[]},{value:"Querying Data",id:"querying-data",children:[]},{value:"The Final Script",id:"the-final-script",children:[]}],s={toc:c};function u(n){var e=n.components,t=(0,a.Z)(n,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"dqlx")," is a fully featured Dgraph Schema and Query Builder for Go. ",(0,i.kt)("br",null),"\nIt aims to simplify the interaction with the awesome ",(0,i.kt)("strong",{parentName:"p"},"Dgraph")," database allowing you to\nfluently compose any queries and mutations of any complexity. It also comes with a rich Schema builder\nto easily develop and maintain your Dgraph schema."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get -u github.com/fenos/dqlx\n")),(0,i.kt)("h2",{id:"connecting"},"Connecting"),(0,i.kt)("p",null,"Once we installed the library we can quickly connect to a DGraph Cluster"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/fenos/dqlx"\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:8080")\n    \n    if err != nil {\n        panic(err)  \n    }\n}\n')),(0,i.kt)("h2",{id:"inserting-data"},"Inserting Data"),(0,i.kt)("p",null,"At this point we should be successfully connected to the cluster. Let's add some data\nso that we can query it later."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/fenos/dqlx"\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:8080")\n    \n    if err != nil {\n        panic(err)\n    }\n\n    ctx := context.Background()\n\n    data := []map[string]interface{}{\n        {\n            "uid": "_:leo",\n            "name": "Leo",\n            "animal": "Cat",\n            "age": 6,\n        },\n        {\n            "uid": "_:ollie",\n            "name": "Ollie",\n            "animal": "Cat",\n            "age": 2,\n        },\n        {\n            "uid": "_:charlie",\n            "name": "Charlie",\n            "animal": "Dog",\n            "age": 3,\n        },\n    }\n    \n    resp, err := db.Mutation().Set(data).Execute(ctx)\n    \n    if err != nil {\n        panic(err)\n    }\n\n    println(fmt.Sprintf("Leo ID %s", resp.Raw.Uids["leo"]))\n    println(fmt.Sprintf("Ollie ID %s", resp.Raw.Uids["ollie"]))\n    println(fmt.Sprintf("Charlie ID %s", resp.Raw.Uids["charlie"]))\n}\n')),(0,i.kt)("h2",{id:"querying-data"},"Querying Data"),(0,i.kt)("p",null,"Now that we have some data to work with, let's write some queries! ",(0,i.kt)("br",null),"\nWe are going to have the following criterias in our query:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Must be a Cat "),(0,i.kt)("li",{parentName:"ul"},"Younger than 5 years old")),(0,i.kt)("p",null,"Spoiler: We should be getting back only ",(0,i.kt)("strong",{parentName:"p"},"Ollie"),"!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    // ... rest of the function\n\n    var animals []map[string]interface{}\n\n    _, err = db.Query(dqlx.HasFn("animal")).\n        Filter(\n            dqlx.Eq{"animal": "Cat"},\n            dqlx.Lt{"age": 5},\n        ).\n        Select(`\n            uid\n            name\n            animal\n            age\n        `).\n        UnmarshalInto(&animals).\n        Execute(ctx)\n\n    if err != nil { panic(err) }\n\n    println(fmt.Sprintf("The animals are %v", animals))\n}\n')),(0,i.kt)("h2",{id:"the-final-script"},"The Final Script"),(0,i.kt)("p",null,"When putting all our code together, we'll get this lovely program:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/fenos/dqlx"\n    "log"\n)\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:9080")\n\n    if err != nil {\n        log.Fatal()\n    }\n\n    ctx := context.Background()\n\n    data := []map[string]interface{}{\n        {\n            "uid": "_:leo",\n            "name": "Leo",\n            "species": "Cat",\n            "age": 6,\n        },\n        {\n            "uid": "_:ollie",\n            "name": "Ollie",\n            "species": "Cat",\n            "age": 2,\n        },\n        {\n            "uid": "_:charlie",\n            "name": "Charlie",\n            "species": "Dog",\n            "age": 3,\n        },\n    }\n\n    resp, err := db.Mutation().Set(data).Execute(ctx)\n\n    if err != nil {\n        panic(err)\n    }\n\n    println(fmt.Sprintf("Leo ID %s", resp.Raw.Uids["leo"]))\n    println(fmt.Sprintf("Ollie ID %s", resp.Raw.Uids["ollie"]))\n    println(fmt.Sprintf("Charlie ID %s", resp.Raw.Uids["charlie"]))\n\n    var animals []map[string]interface{}\n\n    _, err = db.Query(dqlx.HasFn("species")).\n        Filter(\n            dqlx.Eq{"species": "Cat"},\n            dqlx.Lt{"age": 5},\n        ).\n        Select(`\n            uid\n            name\n            species\n            age\n        `).\n        UnmarshalInto(&animals).\n        Execute(ctx)\n\n    if err != nil { panic(err) }\n\n    println(fmt.Sprintf("The animals are: %v", animals))\n}\n')),(0,i.kt)("p",null,"Congratulations! ",(0,i.kt)("br",null),"\nYou now have the basics to deep dive into the various aspects of the Queries & Mutations."))}u.isMDXComponent=!0}}]);