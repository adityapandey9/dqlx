(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return c}));var a=t(3),r=(t(0),t(94));const i={sidebar_position:1},o={unversionedId:"mutations/set",id:"mutations/set",isDocsHomePage:!1,title:"Set",description:"In this section we'll learn how to Insert and Update data in Dgraph",source:"@site/docs/mutations/set.md",sourceDirName:"mutations",slug:"/mutations/set",permalink:"/dqlx/docs/mutations/set",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/mutations/set.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Multiple Query Blocks",permalink:"/dqlx/docs/queries/multiple-query-blocks"},next:{title:"Delete",permalink:"/dqlx/docs/mutations/delete"}},l=[{value:"Inserts",id:"inserts",children:[]},{value:"Upserts",id:"upserts",children:[{value:"Logical Upsert",id:"logical-upsert",children:[]},{value:"Conditional Upsert",id:"conditional-upsert",children:[]}]}],s={toc:l};function c({components:e,...n}){return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this section we'll learn how to ",Object(r.b)("strong",{parentName:"p"},"Insert")," and ",Object(r.b)("strong",{parentName:"p"},"Update")," data in Dgraph"),Object(r.b)("p",null,"Operations that mutate the storage are called ",Object(r.b)("inlineCode",{parentName:"p"},"Mutations")," we are going to use a ",Object(r.b)("inlineCode",{parentName:"p"},"Set")," mutation\nto store and update data."),Object(r.b)("p",null,"If we provide a valid ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," within the node we are trying to operate on, the operation becomes an ",Object(r.b)("inlineCode",{parentName:"p"},"Update"),".\nIf the ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," we provided doesn't exist it will try to insert it. "),Object(r.b)("p",null,"The set operation works like an ",Object(r.b)("inlineCode",{parentName:"p"},"Upsert")," operation over the ",Object(r.b)("inlineCode",{parentName:"p"},"uid")),Object(r.b)("h2",{id:"inserts"},"Inserts"),Object(r.b)("p",null,"If we want to store data, we'll make sure that we don't provide any ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," to our nodes.\nDgraph will generate one automatically for us."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'data := []map[string]interface{}{\n    {\n        "name": "Leo",\n        "animal": "Cat",\n        "age": 6,\n    },\n    {\n        "name": "Ollie",\n        "animal": "Cat",\n        "age": 2,\n    },\n    {\n        "name": "Charlie",\n        "animal": "Dog",\n        "age": 3,\n    },\n}\n\nresponse, err := db.Mutation().Set(data).Execute(ctx)\n')),Object(r.b)("p",null,"You can access the newly generated ",Object(r.b)("inlineCode",{parentName:"p"},"uids")," of the above records form the ",Object(r.b)("inlineCode",{parentName:"p"},"response")," object"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},"response.Raw.Uids // map[string]string\n")),Object(r.b)("p",null,"If you try to print the ",Object(r.b)("inlineCode",{parentName:"p"},"Uids")," you'll quickly notice that there is no easy way to understand\nwhich record belongs to which ",Object(r.b)("inlineCode",{parentName:"p"},"id"),". "),Object(r.b)("p",null,"The reason is that ",Object(r.b)("inlineCode",{parentName:"p"},"maps")," in go are not ordered, so we cannot rely\non the order of the ids to determine which id belongs to which record."),Object(r.b)("p",null,'To overcome this limitation, we use the "blank" node concept.\nWe can assign a unique name to our nodes ',Object(r.b)("inlineCode",{parentName:"p"},"ids")," so that we can refer to them\nlater. "),Object(r.b)("p",null,"The syntax for defining a name to our node is: ",Object(r.b)("inlineCode",{parentName:"p"},"_:{name}")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'data := []map[string]interface{}{\n    {\n        "uid": "_:leo",\n        "name": "Leo",\n        "animal": "Cat",\n        "age": 6,\n    },\n    {\n        "uid": "_:ollie",\n        "name": "Ollie",\n        "animal": "Cat",\n        "age": 2,\n    },\n    {\n        "uid": "_:charlie",\n        "name": "Charlie",\n        "animal": "Dog",\n        "age": 3,\n    },\n}\n\nresp, err := db.Mutation().Set(data).Execute(ctx)\n\n// Now we can access the id knowing exactly which id belongs to which node\nresp.Raw.Uids["leo"]\nresp.Raw.Uids["ollie"]\nresp.Raw.Uids["charlie"]\n')),Object(r.b)("h2",{id:"upserts"},"Upserts"),Object(r.b)("p",null,"As previously mentioned, updates are behaving more like upserts.\nWe provide the ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," to the node we want to update and if it exists it will update it, else it will create one."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'data := []map[string]interface{}{\n    {\n        "uid": "0x1", // Provide ID\n        "age": 7,     // field to update\n    },\n}\n\nresp, err := db.Mutation().Set(data).Execute(ctx)\n')),Object(r.b)("h3",{id:"logical-upsert"},"Logical Upsert"),Object(r.b)("p",null,"If we want to upsert on other fields other than the ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," we use a combination of a ",Object(r.b)("inlineCode",{parentName:"p"},"Query")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Mutation")),Object(r.b)("p",null,"let\u2019s say we want to create a new user with ",Object(r.b)("inlineCode",{parentName:"p"},"email")," and ",Object(r.b)("inlineCode",{parentName:"p"},"name")," information.\nWe also want to make sure that one ",Object(r.b)("inlineCode",{parentName:"p"},"email")," has exactly one corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"user")," in the database.\nTo achieve this, we need to first query whether a user exists in the database with the given email. If a user exists, we use its ",Object(r.b)("inlineCode",{parentName:"p"},"UID")," to update the name information.\nIf the user doesn\u2019t exist, we create a new ",Object(r.b)("inlineCode",{parentName:"p"},"user")," and update the ",Object(r.b)("inlineCode",{parentName:"p"},"email")," and ",Object(r.b)("inlineCode",{parentName:"p"},"name")," information."),Object(r.b)("p",null,"We can achieve this with a single operation as following"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'data := []map[string]interface{}{\n    {\n        "uid": "uid(v)",\n        "email": "user@company1.io",\n        "name": "first name"\n    },\n}\n\nuserByEmailQuery := dqlx.Query(dqlx.EqFn("email", "user@company1.io")).\n    .Fields(`\n        v as uid\n        name\n    `)\n\nresp, err := db.Mutation().\n    Query(userByEmailQuery).\n    Set(data).\n    Execute(ctx)\n')),Object(r.b)("h3",{id:"conditional-upsert"},"Conditional Upsert"),Object(r.b)("p",null,"Conditional upsert allows to avoid the entire operation if a certain condition is met."),Object(r.b)("p",null,"Imagine you want to only update a user by email if the email exists. If it doesn't you want to skip the operation\nand not insert the new record"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'data := []map[string]interface{}{\n    {\n        "uid": "uid(v)",\n        "email": "user@company1.io",\n        "name": "first name"\n    },\n}\n\nuserByEmailQuery := dqlx.Query(dqlx.EqFn("email", "user@company1.io")).\n    .Fields(`\n        v as uid\n        name\n    `)\n\ncondition := dqlx.Condition(dqlx.Eq("len(v)", "1"))\n\nresp, err := db.Mutation().\n    Query(userByEmailQuery).\n    Condition(condition).\n    Set(data).\n    Execute(ctx)\n')))}c.isMDXComponent=!0},94:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return t?r.a.createElement(m,l(l({ref:n},c),{},{components:t})):r.a.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);