(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),i=(t(0),t(94)),l={sidebar_position:6},o={unversionedId:"queries/execution",id:"queries/execution",isDocsHomePage:!1,title:"Execution",description:"In this section we'll learn how to execute queries in various modes as well as how we unmarshall the data into a Go structure.",source:"@site/docs/queries/execution.md",sourceDirName:"queries",slug:"/queries/execution",permalink:"/dqlx/docs/queries/execution",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/queries/execution.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Query Variables",permalink:"/dqlx/docs/queries/variables"},next:{title:"Multiple Query Blocks",permalink:"/dqlx/docs/queries/multiple-query-blocks"}},c=[{value:"Execute Query",id:"execute-query",children:[]},{value:"Manual Transaction",id:"manual-transaction",children:[]},{value:"Read Only Transaction",id:"read-only-transaction",children:[]},{value:"Unmarshalling",id:"unmarshalling",children:[{value:"Structs",id:"structs",children:[]}]}],s={toc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this section we'll learn how to execute queries in various modes as well as how we unmarshall the data into a Go structure.\nWe'll also learn how to execute multiple query blocks"),Object(i.b)("h2",{id:"execute-query"},"Execute Query"),Object(i.b)("p",null,"In order to execute a query we must run the ",Object(i.b)("inlineCode",{parentName:"p"},"Execute")," method.\nEvery time we call ",Object(i.b)("inlineCode",{parentName:"p"},"Execute")," a new transaction is created, and it is committed upon success."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx)\n')),Object(i.b)("h2",{id:"manual-transaction"},"Manual Transaction"),Object(i.b)("p",null,"if you want control over the transaction you can certainly do that.\nWe do that passing ",Object(i.b)("inlineCode",{parentName:"p"},"dqlx.WithTnx()")," function to the ",Object(i.b)("inlineCode",{parentName:"p"},"Execute")," method"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'tnx := db.NewTnx()\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx, dqlx.WithTnx(tnx))\n\ntnx.Commit()\n')),Object(i.b)("h2",{id:"read-only-transaction"},"Read Only Transaction"),Object(i.b)("p",null,"Similarly, we use ",Object(i.b)("inlineCode",{parentName:"p"},"WithReadOnly")," if we want to mark this query to be read-only"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx, dqlx.WithReadOnly())\n')),Object(i.b)("h2",{id:"unmarshalling"},"Unmarshalling"),Object(i.b)("p",null,"Once the query is executed successfully, we want to grab the result set and Unmarshall it into a go data structure."),Object(i.b)("p",null,"We can Unmarshall the results by calling ",Object(i.b)("inlineCode",{parentName:"p"},"Unmarshall")," on the response object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'response, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    Execute(ctx)\n\nvar data []map[string]interface{}\n\nerr := response.Unmarshall(&data)\n\nif err != nil {\n    panic(err)\n}\n\n// data is now populated!\n')),Object(i.b)("p",null,"Another way to achieve the same as above but with fewer lines of code is to use the ",Object(i.b)("inlineCode",{parentName:"p"},"UnmarshallInto")," method during the building phase."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'var data []map[string]interface{}\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    UnmarshallInto(&data)\n    Execute(ctx)\n')),Object(i.b)("h3",{id:"structs"},"Structs"),Object(i.b)("p",null,"You can also Unmarshall into well-defined structs, which is usually the recommended way.\nThe marshaller takes in consideration the ",Object(i.b)("inlineCode",{parentName:"p"},"json:")," tag of the field to automatically map the data."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'type Animal struct {\n    Uid     string `json:"uid"`\n    Name    string `json:"name"`\n    Species string `json:"species"`\n}\n\nvar animals []Animal\n\nresponse, err := db.\n    Query(dqlx.HasFn("name")).\n    Fields(`\n        uid\n        name\n        species\n    `).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n    ).\n    UnmarshallInto(&animals)\n    Execute(ctx)\n')))}u.isMDXComponent=!0},94:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?a.a.createElement(b,o(o({ref:n},s),{},{components:t})):a.a.createElement(b,o({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);