(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{82:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return l})),t.d(e,"metadata",(function(){return o})),t.d(e,"toc",(function(){return c})),t.d(e,"default",(function(){return u}));var r=t(3),a=t(7),i=(t(0),t(94)),l={sidebar_position:1},o={unversionedId:"getting-started/intro",id:"getting-started/intro",isDocsHomePage:!1,title:"Quick Introduction",description:"dqlx is a fully featured Dgraph Schema and Query Builder for Go.",source:"@site/docs/getting-started/intro.md",sourceDirName:"getting-started",slug:"/getting-started/intro",permalink:"/dqlx/docs/getting-started/intro",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/getting-started/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Selection",permalink:"/dqlx/docs/queries/selection"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Connecting",id:"connecting",children:[]},{value:"Inserting Data",id:"inserting-data",children:[]},{value:"Querying Data",id:"querying-data",children:[]},{value:"The Final Script",id:"the-final-script",children:[]}],s={toc:c};function u(n){var e=n.components,t=Object(a.a)(n,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"dqlx")," is a fully featured Dgraph Schema and Query Builder for Go. ",Object(i.b)("br",null),"\nIt aims to simplify the interaction with the awesome ",Object(i.b)("strong",{parentName:"p"},"Dgraph")," database allowing you to\nfluently compose any queries and mutations of any complexity. It also comes with a rich Schema builder\nto easily develop and maintain your Dgraph schema."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"go get -u github.com/fenos/dqlx\n")),Object(i.b)("h2",{id:"connecting"},"Connecting"),Object(i.b)("p",null,"Once we installed the library we can quickly connect to a DGraph Cluster"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'import "github.com/fenos/dqlx"\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:8080")\n    \n    if err != nil {\n        panic(err)  \n    }\n}\n')),Object(i.b)("h2",{id:"inserting-data"},"Inserting Data"),Object(i.b)("p",null,"At this point we should be successfully connected to the cluster. Let's add some data\nso that we can query it later."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'import "github.com/fenos/dqlx"\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:8080")\n    \n    if err != nil {\n        panic(err)\n    }\n\n    ctx := context.Background()\n\n    data := []map[string]interface{}{\n        {\n            "uid": "_:leo",\n            "name": "Leo",\n            "animal": "Cat",\n            "age": 6,\n        },\n        {\n            "uid": "_:ollie",\n            "name": "Ollie",\n            "animal": "Cat",\n            "age": 2,\n        },\n        {\n            "uid": "_:charlie",\n            "name": "Charlie",\n            "animal": "Dog",\n            "age": 3,\n        },\n    }\n    \n    resp, err := db.Mutation().Set(data).Execute(ctx)\n    \n    if err != nil {\n        panic(err)\n    }\n\n    println(fmt.Sprintf("Leo ID %s", resp.Raw.Uids["leo"]))\n    println(fmt.Sprintf("Ollie ID %s", resp.Raw.Uids["ollie"]))\n    println(fmt.Sprintf("Charlie ID %s", resp.Raw.Uids["charlie"]))\n}\n')),Object(i.b)("h2",{id:"querying-data"},"Querying Data"),Object(i.b)("p",null,"Now that we have some data to work with, let's write some queries! ",Object(i.b)("br",null),"\nWe are going to have the following criterias in our query:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Must be a Cat "),Object(i.b)("li",{parentName:"ul"},"Younger than 5 years old")),Object(i.b)("p",null,"Spoiler: We should be getting back only ",Object(i.b)("strong",{parentName:"p"},"Ollie"),"!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'func main() {\n    // ... rest of the function\n\n    var animals []map[string]interface{}\n\n    _, err = db.Query(dqlx.HasFn("animal")).\n        Filter(\n            dqlx.Eq{"animal": "Cat"},\n            dqlx.Lt{"age": 5},\n        ).\n        Fields(`\n            uid\n            name\n            animal\n            age\n        `).\n        UnmarshalInto(&animals).\n        Execute(ctx)\n\n    if err != nil { panic(err) }\n\n    println(fmt.Sprintf("The animals are %v", animals))\n}\n')),Object(i.b)("h2",{id:"the-final-script"},"The Final Script"),Object(i.b)("p",null,"When putting all our code together, we'll get this lovely program:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/fenos/dqlx"\n    "log"\n)\n\nfunc main() {\n    db, err := dqlx.Connect("localhost:9080")\n\n    if err != nil {\n        log.Fatal()\n    }\n\n    ctx := context.Background()\n\n    data := []map[string]interface{}{\n        {\n            "uid": "_:leo",\n            "name": "Leo",\n            "species": "Cat",\n            "age": 6,\n        },\n        {\n            "uid": "_:ollie",\n            "name": "Ollie",\n            "species": "Cat",\n            "age": 2,\n        },\n        {\n            "uid": "_:charlie",\n            "name": "Charlie",\n            "species": "Dog",\n            "age": 3,\n        },\n    }\n\n    resp, err := db.Mutation().Set(data).Execute(ctx)\n\n    if err != nil {\n        panic(err)\n    }\n\n    println(fmt.Sprintf("Leo ID %s", resp.Raw.Uids["leo"]))\n    println(fmt.Sprintf("Ollie ID %s", resp.Raw.Uids["ollie"]))\n    println(fmt.Sprintf("Charlie ID %s", resp.Raw.Uids["charlie"]))\n\n    var animals []map[string]interface{}\n\n    _, err = db.Query(dqlx.HasFn("species")).\n        Filter(\n            dqlx.Eq{"species": "Cat"},\n            dqlx.Lt{"age": 5},\n        ).\n        Fields(`\n            uid\n            name\n            species\n            age\n        `).\n        UnmarshalInto(&animals).\n        Execute(ctx)\n\n    if err != nil { panic(err) }\n\n    println(fmt.Sprintf("The animals are: %v", animals))\n}\n')),Object(i.b)("p",null,"Congratulations! ",Object(i.b)("br",null),"\nYou now have the basics to deep dive into the various aspects of the Queries & Mutations."))}u.isMDXComponent=!0},94:function(n,e,t){"use strict";t.d(e,"a",(function(){return p})),t.d(e,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=a.a.createContext({}),u=function(n){var e=a.a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=u(n.components);return a.a.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.a.createElement(a.a.Fragment,{},e)}},b=a.a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,l=n.parentName,s=c(n,["components","mdxType","originalType","parentName"]),p=u(t),b=r,m=p["".concat(l,".").concat(b)]||p[b]||d[b]||i;return t?a.a.createElement(m,o(o({ref:e},s),{},{components:t})):a.a.createElement(m,o({ref:e},s))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,l=new Array(i);l[0]=b;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o.mdxType="string"==typeof n?n:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);