(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[468],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5454:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return o},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={sidebar_position:1},s={unversionedId:"schema/create-schema",id:"schema/create-schema",isDocsHomePage:!1,title:"Management",description:"In this section we'll learn how to create and manage a DGraph Schema",source:"@site/docs/schema/create-schema.md",sourceDirName:"schema",slug:"/schema/create-schema",permalink:"/dqlx/docs/schema/create-schema",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/schema/create-schema.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Delete",permalink:"/dqlx/docs/mutations/delete"},next:{title:"Type Generation",permalink:"/dqlx/docs/schema/type-generation"}},o=[{value:"Create a schema",id:"create-a-schema",children:[{value:"Predicates",id:"predicates",children:[]},{value:"Types",id:"types",children:[]},{value:"Global predicate on a Type",id:"global-predicate-on-a-type",children:[]},{value:"Relations",id:"relations",children:[]},{value:"Indexes",id:"indexes",children:[]},{value:"Altering the schema",id:"altering-the-schema",children:[]}]}],c={toc:o};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this section we'll learn how to create and manage a DGraph ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")),(0,i.kt)("h2",{id:"create-a-schema"},"Create a schema"),(0,i.kt)("p",null,"The schema builder allows you to define ",(0,i.kt)("inlineCode",{parentName:"p"},"Types")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Predicates")," in an  easier way.",(0,i.kt)("br",null),"\nIt will handle all the syntax complexities to define direct and reverse relations."),(0,i.kt)("h3",{id:"predicates"},"Predicates"),(0,i.kt)("p",null,"Let's start adding some predicates to our schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema := db.Schema()\n\nschema.Predicate("name", dqlx.ScalarString)\nschema.Predicate("age", dqlx.ScalarInt)\nschema.Predicate("birthday", dqlx.ScalarDateTime)\n\nerr := schame.Alter(ctx)\n')),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("p",null,"When you create a type with ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," all the predicates will be automatically prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"{Type}.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema := db.Schema()\n\nschema.Type("User", func(user *TypeBuilder) {\n    user.String("name")\n    user.Password("password")\n    user.Int("age")\n    user.DateTime("birthday")\n    user.Float("score")\n    user.Bool("verified")\n    user.UID("some_id")\n})\n')),(0,i.kt)("h3",{id:"global-predicate-on-a-type"},"Global predicate on a Type"),(0,i.kt)("p",null,"If you want to reference a predicate that is globally available, you'll need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Predicate")," method\non a type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema := db.Schema()\n\nname := schema.Predicate("name", dqlx.ScalarString)\n\nschema.Type("User", func(user *TypeBuilder) {\n    user.Predicate(name)\n    user.String("surname")\n})\n')),(0,i.kt)("h3",{id:"relations"},"Relations"),(0,i.kt)("p",null,"Defining relations with the Schema Builder have never been easier. "),(0,i.kt)("p",null,"Imagine the scenario of ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," have many ",(0,i.kt)("inlineCode",{parentName:"p"},"Posts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Posts")," have many ",(0,i.kt)("inlineCode",{parentName:"p"},"Comments"),", here is how the schema might look like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema := db.Schema()\n\nschema.Type("User", func(user *TypeBuilder) {\n    user.String("name")\n    user.Password("password")\n    user.Int("age")\n    \n    user.Type("posts", "Post").List()\n})\n\nschema.Type("Post", func(post *TypeBuilder) {\n    post.String("title")\n    post.String("description")\n    post.Int("age")\n    \n    post.Type("user", "User").Reverse()\n    post.Type("comments", "Comment").List()\n})\n\nschema.Type("Comment", func(comment *TypeBuilder) {\n    post.String("content")\n    \n    post.Type("user", "User")\n    post.Type("post", "Post").Reverse()\n})\n')),(0,i.kt)("h3",{id:"indexes"},"Indexes"),(0,i.kt)("p",null,"You can set specific index by chaining the ",(0,i.kt)("inlineCode",{parentName:"p"},"Index{Type}")," method on the predicate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema.Type("User", func(user *TypeBuilder) {\n    user.String("name").IndexTerm().IndexFullTerm()\n    user.Password("password").Index()\n})\n')),(0,i.kt)("h4",{id:"available-indexes"},"Available indexes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"exact"),(0,i.kt)("li",{parentName:"ul"},"hash"),(0,i.kt)("li",{parentName:"ul"},"term"),(0,i.kt)("li",{parentName:"ul"},"fulltext"),(0,i.kt)("li",{parentName:"ul"},"trigram"),(0,i.kt)("li",{parentName:"ul"},"year"),(0,i.kt)("li",{parentName:"ul"},"month"),(0,i.kt)("li",{parentName:"ul"},"day"),(0,i.kt)("li",{parentName:"ul"},"hour")),(0,i.kt)("h3",{id:"altering-the-schema"},"Altering the schema"),(0,i.kt)("p",null,"In order to alter the schema you must call the ",(0,i.kt)("inlineCode",{parentName:"p"},"Alter")," method.\nThis method will not drop any fields by default. You can specify ",(0,i.kt)("inlineCode",{parentName:"p"},"WithDropAll")," to force recreating\nthe schema from scratch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"schema := db.Schema()\n\n// ...\n\nerr := schame.Alter(ctx, dqlx.WithDropAll(true))\n")),(0,i.kt)("p",null,"By default, indexing is set to run ",(0,i.kt)("strong",{parentName:"p"},"In the background")," if you prefer it on the main process you can disable it\nwith the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithRunInBackground(false)")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"schema := db.Schema()\n\n// ...\n\nerr := schame.Alter(ctx, dqlx.WithRunInBackground(false))\n")))}p.isMDXComponent=!0}}]);