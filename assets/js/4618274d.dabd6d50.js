(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[983],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1163:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return u}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),l={sidebar_position:1},o={unversionedId:"queries/selection",id:"queries/selection",isDocsHomePage:!1,title:"Selection",description:"In this section we'll learn how to select nodes and edges for our queries.",source:"@site/docs/queries/selection.md",sourceDirName:"queries",slug:"/queries/selection",permalink:"/dqlx/docs/queries/selection",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/queries/selection.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Introduction",permalink:"/dqlx/docs/getting-started/intro"},next:{title:"Count",permalink:"/dqlx/docs/queries/count"}},s=[{value:"Select Attributes",id:"select-attributes",children:[]},{value:"Query edges",id:"query-edges",children:[]},{value:"Aliases",id:"aliases",children:[]},{value:"Select API",id:"select-api",children:[]}],c={toc:s};function u(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this section we'll learn how to select nodes and edges for our queries."),(0,i.kt)("h3",{id:"select-attributes"},"Select Attributes"),(0,i.kt)("p",null,"We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Select")," function to select the attributes for our nodes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").Select(`\n    uid\n    name\n    animal\n`)\n')),(0,i.kt)("p",null,"produces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    rootQuery(func: type(Animal)) {\n        uid\n        name\n        animal\n    }\n}\n")),(0,i.kt)("h3",{id:"query-edges"},"Query edges"),(0,i.kt)("p",null,"If we want to query fields that are nested we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Edge")," function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").\n    Select(`\n        uid\n        name\n        animal\n    `).\n    Edge("favorite_food", dqlx.Select(`\n        uid\n        brand\n        type\n    `)).\n    Edge("favorite_food->ingredients", dqlx.Select(`\n        uid\n        name\n        family\n    `)).\n    Edge("favorite_food->ingredients->nutrition", dqlx.Select(`\n        kcal\n    `))\n')),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    rootQuery(func: type(Animal)) {\n        uid\n        name\n        animal\n        favorite_food {\n            uid\n            brand\n            type\n            ingredients {\n                uid\n                name\n                family\n                nutrition {\n                    kcal\n                }     \n            }   \n        }   \n    }\n}\n")),(0,i.kt)("p",null,"The first parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Edge")," function must be ",(0,i.kt)("strong",{parentName:"p"},"the full path")," starting from its upmost ancestor."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Using a slice syntax ")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you prefer using a slice syntax over the conventional string (using the symbol ",(0,i.kt)("inlineCode",{parentName:"p"},"->"),")\nyou can instead use ",(0,i.kt)("inlineCode",{parentName:"p"},'EdgePath([]string{"favorite_food", ...})')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'Edge(dqlx.EdgePath([]string{"favorite_food", ...}))')))),(0,i.kt)("h3",{id:"aliases"},"Aliases"),(0,i.kt)("p",null,"In Order to alias a field you can simply use the expression ",(0,i.kt)("inlineCode",{parentName:"p"},"alias:field")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").Select(`\n    uid\n    alias:name\n`)\n')),(0,i.kt)("p",null,"or use the function ",(0,i.kt)("inlineCode",{parentName:"p"},"Alias")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").Select(\n    "uid",\n    dqlx.Alias("alias", "name")\n)\n')),(0,i.kt)("h3",{id:"select-api"},"Select API"),(0,i.kt)("p",null,"You have few ways to select fields"),(0,i.kt)("h4",{id:"template-literal"},"Template literal"),(0,i.kt)("p",null,"Most of the examples we've seen so far uses the template literal for defining fields."),(0,i.kt)("p",null,"The newline is the delimiter for the next field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").Select(`\n    uid\n    name\n`)\n')),(0,i.kt)("h4",{id:"variadic-strings"},"Variadic Strings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.QueryType("Animal").Select(\n    "uid", \n    "name",\n)\n')),(0,i.kt)("h4",{id:"slices"},"Slices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'fields := []string{"uid", "name"}\n\ndb.QueryType("Animal").Select(fields...)\n')))}u.isMDXComponent=!0}}]);