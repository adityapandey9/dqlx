(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return o})),t.d(n,"default",(function(){return b}));var a=t(3),l=t(7),r=(t(0),t(91)),c={sidebar_position:2},i={unversionedId:"queries/filters",id:"queries/filters",isDocsHomePage:!1,title:"Filters",description:"In this section we'll learn how to filter the root query and its nested edges.",source:"@site/docs/queries/filters.md",sourceDirName:"queries",slug:"/queries/filters",permalink:"/dqlx/docs/queries/filters",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/queries/filters.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Selection",permalink:"/dqlx/docs/queries/selection"},next:{title:"Sorting",permalink:"/dqlx/docs/queries/sorting"}},o=[{value:"Root Filter",id:"root-filter",children:[]},{value:"Query Filters",id:"query-filters",children:[]},{value:"Filtering Connections",id:"filtering-connections",children:[]},{value:"Filtering Edges",id:"filtering-edges",children:[]},{value:"Functions",id:"functions",children:[{value:"Has",id:"has",children:[]},{value:"Type",id:"type",children:[]},{value:"Between",id:"between",children:[]},{value:"UID",id:"uid",children:[]},{value:"UIDIn",id:"uidin",children:[]},{value:"Regexp",id:"regexp",children:[]},{value:"Eq",id:"eq",children:[]},{value:"Ge",id:"ge",children:[]},{value:"Gt",id:"gt",children:[]},{value:"Le",id:"le",children:[]},{value:"Lt",id:"lt",children:[]},{value:"Allofterms",id:"allofterms",children:[]},{value:"Anyofterms",id:"anyofterms",children:[]},{value:"Alloftext",id:"alloftext",children:[]},{value:"Anyoftext",id:"anyoftext",children:[]},{value:"Match",id:"match",children:[]},{value:"Term",id:"term",children:[]},{value:"Exact",id:"exact",children:[]},{value:"Fulltext",id:"fulltext",children:[]}]}],u={toc:o};function b(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this section we'll learn how to filter the root query and its nested edges. ",Object(r.b)("br",null),"\nYou'll also find all the available definitions of ",Object(r.b)("strong",{parentName:"p"},"dqlx")," functions"),Object(r.b)("h2",{id:"root-filter"},"Root Filter"),Object(r.b)("p",null,"The first constraint we need to provide to our query is a single filter to help Dgraph minimise the amount of data we want to query against.\nWe can achieve data using any functions in ",Object(r.b)("strong",{parentName:"p"},"dqlx")," that ends in ",Object(r.b)("inlineCode",{parentName:"p"},"Fn")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'db.Query(dqlx.HasFn("name"))            // rootQuery(func: has(name))\ndb.Query(dqlx.TypeFn("Animal"))         // rootQuery(func: type(Animal))\ndb.Query(dqlx.EqFn("name", "Ollie"))    // rootQuery(func: eq(name, $0))\n\n// Aliases\ndb.QueryType("Animal")                  // rootQuery(func: type(Animal))\ndb.QueryHas("name")                     // rootQuery(func: has(name))\n')),Object(r.b)("h2",{id:"query-filters"},"Query Filters"),Object(r.b)("p",null,"Subsequently, we can apply other filters to our query, in order to narrow down the exact data we are after.\nWe do that using the ",Object(r.b)("inlineCode",{parentName:"p"},"Filter()")," function"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'db.Query(dqlx.HasFn("name")).\n    Filter(\n        dqlx.EqFn("name", "Ollie"),\n        dqlx.GtFn("age", 3),\n    ).\n    Filter(dqlx.EqFn("animal", "Cat"))\n')),Object(r.b)("p",null,"You can either add filters within a single ",Object(r.b)("inlineCode",{parentName:"p"},"Filter()")," call, or chain multiple ",Object(r.b)("inlineCode",{parentName:"p"},"Filter")," calls, the result is the same.\nAll the above filters will be concatenated together with a ",Object(r.b)("inlineCode",{parentName:"p"},"AND")," condition"),Object(r.b)("h4",{id:"sugars-on-filters"},"Sugars on Filters"),Object(r.b)("p",null,"Instead of using the ",Object(r.b)("inlineCode",{parentName:"p"},"Fn")," functions within our ",Object(r.b)("inlineCode",{parentName:"p"},"Filter")," we can use the equivalent of that function as a ",Object(r.b)("inlineCode",{parentName:"p"},"Map"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'db.Query(dqlx.HasFn("name")).\n    Filter(\n        dqlx.Eq{"name": "Ollie", "animal": "Cat"},\n        dqlx.Gt{"age": 2},\n    )\n')),Object(r.b)("p",null,"This makes it more elegant to express the same filter type for different fields"),Object(r.b)("h2",{id:"filtering-connections"},"Filtering Connections"),Object(r.b)("p",null,"So far the filters we've seen till now are always concatenated with an ",Object(r.b)("inlineCode",{parentName:"p"},"AND")," condition.\nIn order to conjunct the filters together with different conditions such as ",Object(r.b)("inlineCode",{parentName:"p"},"OR")," we do the following."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'db.Query(dqlx.HasFn("name")).\n    Filter(\n        dql.Or{\n            dql.And{\n                dqlx.Eq{"name": "Ollie", "animal": "Cat"},\n                dqlx.Gt{"age": 2},\n             },\n            dql.And{\n                dqlx.Eq{"name": "Leo", "animal": "Cat"},\n                dqlx.Gt{"age": 3},\n            },\n        },\n    )\n')),Object(r.b)("p",null,"which will translate in:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-graphql"},"query RootQuery($0: string,$1: string,$3: int, $4: string, $5: string, $6: int) {\n    rootQuery(func: has(name)) @filter( (eq(name,$0) AND eq(animal,$1) AND gt(age, $3)) OR (eq(name,$4) AND eq(animal,$5) AND gt(age, $6))) {\n        \n    }\n}\n")),Object(r.b)("h2",{id:"filtering-edges"},"Filtering Edges"),Object(r.b)("p",null,"Filters on edges works the same way, just add the filter functions to your edge"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'db.Query(dqlx.HasFn("name")).\n    Filter(\n        dqlx.Eq{"name": "Ollie", "animal": "Cat"},\n        dqlx.Gt{"age": 2},\n    ).\n    Edge("favorite_food", dqlx.Eq{"brand": "Wishcask"})\n')),Object(r.b)("h2",{id:"functions"},"Functions"),Object(r.b)("h3",{id:"has"},"Has"),Object(r.b)("p",null,"Has function: ",Object(r.b)("inlineCode",{parentName:"p"},"HasFn(predicate)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#has"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.HasFn("name") // as Function\ndqlx.Has("name")   // as Function (alias)\n')),Object(r.b)("h3",{id:"type"},"Type"),Object(r.b)("p",null,"Has function: ",Object(r.b)("inlineCode",{parentName:"p"},"HasFn(predicate)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#type"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.TypeFn("name") // as Function\ndqlx.Type("name")   // as Function (alias)\n')),Object(r.b)("h3",{id:"between"},"Between"),Object(r.b)("p",null,"Between function: ",Object(r.b)("inlineCode",{parentName:"p"},"BetweenFn(predicate, from, to)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#type"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.BetweenFn("age", 1, 30) // as Function\ndqlx.Between("age", 1, 30)   // as Function (alias)\n')),Object(r.b)("h3",{id:"uid"},"UID"),Object(r.b)("p",null,"UID function: ",Object(r.b)("inlineCode",{parentName:"p"},"UIDFn(predicate)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#type"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.UIDIn{"name": []string{"Ollie", "Leo"}} // as Map\ndqlx.UIDInFn("name", []string{"Ollie", "Leo"}) // as Function\n')),Object(r.b)("h3",{id:"uidin"},"UIDIn"),Object(r.b)("p",null,"UIDIn function: ",Object(r.b)("inlineCode",{parentName:"p"},"UIDInFn(predicate, vlaues)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#type"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.UIDFn("name") // as Function\ndqlx.UID("name")   // as Function (alias)\n')),Object(r.b)("h3",{id:"regexp"},"Regexp"),Object(r.b)("p",null,"Regexp function: ",Object(r.b)("inlineCode",{parentName:"p"},"RegexpFn(predicate, pattern)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#type"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Regexp{"name": "/pattern/"} // as Map\ndqlx.RegexpFn("name", "/pattern/") // as Function\n')),Object(r.b)("h3",{id:"eq"},"Eq"),Object(r.b)("p",null,"Eq function: ",Object(r.b)("inlineCode",{parentName:"p"},"EqFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#equal-to"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Eq{ "name": "value" } // as Map\ndqlx.EqFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"ge"},"Ge"),Object(r.b)("p",null,"Ge function: ",Object(r.b)("inlineCode",{parentName:"p"},"GeFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#less-than-less-than-or-equal-to-greater-than-and-greater-than-or-equal-to"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Ge{ "name": "value" } // as Map\ndqlx.GeFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"gt"},"Gt"),Object(r.b)("p",null,"Gt function: ",Object(r.b)("inlineCode",{parentName:"p"},"GtFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#less-than-less-than-or-equal-to-greater-than-and-greater-than-or-equal-to"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Gt{ "name": "value" } // as Map\ndqlx.GtFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"le"},"Le"),Object(r.b)("p",null,"Le function: ",Object(r.b)("inlineCode",{parentName:"p"},"LeFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#less-than-less-than-or-equal-to-greater-than-and-greater-than-or-equal-to"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Le{ "name": "value" } // as Map\ndqlx.LeFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"lt"},"Lt"),Object(r.b)("p",null,"Lt function: ",Object(r.b)("inlineCode",{parentName:"p"},"LtFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#less-than-less-than-or-equal-to-greater-than-and-greater-than-or-equal-to"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Lt{ "name": "value" } // as Map\ndqlx.LtFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"allofterms"},"Allofterms"),Object(r.b)("p",null,"Allofterms function: ",Object(r.b)("inlineCode",{parentName:"p"},"AlloftermsFn(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#allofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Allofterms{ "name": "value" } // as Map\ndqlx.AlloftermsFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"anyofterms"},"Anyofterms"),Object(r.b)("p",null,"Anyofterms function: ",Object(r.b)("inlineCode",{parentName:"p"},"Anyofterms(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Anyofterms{ "name": "value" } // as Map\ndqlx.AnyoftermsFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"alloftext"},"Alloftext"),Object(r.b)("p",null,"Alloftext function: ",Object(r.b)("inlineCode",{parentName:"p"},"Alloftext(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Alloftext{ "name": "value" } // as Map\ndqlx.AlloftextFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"anyoftext"},"Anyoftext"),Object(r.b)("p",null,"Anyoftext function: ",Object(r.b)("inlineCode",{parentName:"p"},"Anyoftext(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Anyoftext{ "name": "value" } // as Map\ndqlx.AnyoftextFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"match"},"Match"),Object(r.b)("p",null,"Match function: ",Object(r.b)("inlineCode",{parentName:"p"},"Match(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Match{ "name": "value" } // as Map\ndqlx.MatchFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"term"},"Term"),Object(r.b)("p",null,"Term function: ",Object(r.b)("inlineCode",{parentName:"p"},"Term(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Term{ "name": "value" } // as Map\ndqlx.TermFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"exact"},"Exact"),Object(r.b)("p",null,"Exact function: ",Object(r.b)("inlineCode",{parentName:"p"},"Exact(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Exact{ "name": "value" } // as Map\ndqlx.ExactFn("name", "value") // as Function\n')),Object(r.b)("h3",{id:"fulltext"},"Fulltext"),Object(r.b)("p",null,"Fulltext function: ",Object(r.b)("inlineCode",{parentName:"p"},"Fulltext(predicate, value)")," ",Object(r.b)("br",null),"\n",Object(r.b)("a",{parentName:"p",href:"https://dgraph.io/docs/query-language/functions/#anyofterms"},"Dgraph Doc")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-go"},'dqlx.Fulltext{ "name": "value" } // as Map\ndqlx.FulltextFn("name", "value") // as Function\n')))}b.isMDXComponent=!0},91:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=l.a.createContext({}),b=function(e){var n=l.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=b(e.components);return l.a.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=b(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||s[d]||r;return t?l.a.createElement(m,i(i({ref:n},u),{},{components:t})):l.a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var u=2;u<r;u++)c[u]=t[u];return l.a.createElement.apply(null,c)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);