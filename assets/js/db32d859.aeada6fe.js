(self.webpackChunkdqlx_docs=self.webpackChunkdqlx_docs||[]).push([[653],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3741:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={sidebar_position:5},o={unversionedId:"security",id:"security",isDocsHomePage:!1,title:"Security",description:"In this section we'll learn all about security and helping to understand how to prevent common DQL injection",source:"@site/docs/security.md",sourceDirName:".",slug:"/security",permalink:"/dqlx/docs/security",editUrl:"https://github.com/fenos/dqlx-docs/edit/master/docs/security.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Type Generation",permalink:"/dqlx/docs/schema/type-generation"}},s=[{value:"DQL Injection",id:"dql-injection",children:[]},{value:"dqlx At Rescue",id:"dqlx-at-rescue",children:[{value:"GraphQL Variables",id:"graphql-variables",children:[]},{value:"Escaping Predicates",id:"escaping-predicates",children:[]},{value:"Be Careful!",id:"be-careful",children:[]}]},{value:"Reporting Vulnerabilities",id:"reporting-vulnerabilities",children:[]}],u={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this section we'll learn all about security and helping to understand how to prevent common ",(0,i.kt)("inlineCode",{parentName:"p"},"DQL injection"),"\nexploit."),(0,i.kt)("h2",{id:"dql-injection"},"DQL Injection"),(0,i.kt)("p",null,"If you come from a SQL world you might be familiar with the term ",(0,i.kt)("inlineCode",{parentName:"p"},"SQL Injection"),"."),(0,i.kt)("p",null,"DQL Injection is a similar beast but (",(0,i.kt)("a",{parentName:"p",href:"https://discuss.dgraph.io/t/dgraph-dql-injection-prevention/13406"},"overall less dangerous"),"). Let's first understand what is an ",(0,i.kt)("strong",{parentName:"p"},"Injection"),". ",(0,i.kt)("br",null)),(0,i.kt)("p",null,"Every time a query is dynamically generated (",(0,i.kt)("strong",{parentName:"p"},"with dqlx or not"),") strings gets concatenated together to create the final query."),(0,i.kt)("p",null,"The problem arise when your queries are generated based on ",(0,i.kt)("inlineCode",{parentName:"p"},"User Inputs"),". If you are accepting user inputs that gets ",(0,i.kt)("strong",{parentName:"p"},"directly mapped"),' into a query,\nthe "Exploiter" might figure out a way to send an input which might alter the original query that you originally meant to run. '),(0,i.kt)("p",null,'This mean that the "Exploiter" might be able to request more data than he supposed to, or even worst it could delete or alter important information.'),(0,i.kt)("h2",{id:"dqlx-at-rescue"},"dqlx At Rescue"),(0,i.kt)("p",null,"dqlx takes security as one of the reasons for this library to also exists. ",(0,i.kt)("br",null),"\nBy default ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," is ",(0,i.kt)("strong",{parentName:"p"},"DQL Injection safe")," as of ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.2")," ",(0,i.kt)("br",null)," "),(0,i.kt)("p",null,"All the inputs provided to the underline functions exposed by ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," are all escaped by default. Making it impossible to concatenate pieces of strings that might alter the query."),(0,i.kt)("p",null,"How does exactly ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," achieve this? In 2 ways"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using ",(0,i.kt)("a",{parentName:"li",href:"https://dgraph.io/docs/query-language/graphql-variables/"},"GraphQL Query Variables")),(0,i.kt)("li",{parentName:"ul"},"Escaping all predicates with ",(0,i.kt)("inlineCode",{parentName:"li"},"<>")," while also removing dangerous (not allowed) characters ",(0,i.kt)("inlineCode",{parentName:"li"},'^ } | { \\\\ , < > "'))),(0,i.kt)("h3",{id:"graphql-variables"},"GraphQL Variables"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"dqlx")," will replace all the values you provided with a ",(0,i.kt)("strong",{parentName:"p"},"GraphQL Variable"),". ",(0,i.kt)("br",null),"\nFor instance when you write a query that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'query, variables, err := db.Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        animal\n    `).\n    Filter(\n        dql.Or{\n            dql.And{\n                dqlx.Eq{"name": "Ollie", "animal": "Cat"},\n                dqlx.Gt{"age": 2},\n             },\n            dql.And{\n                dqlx.Eq{"name": "Leo", "animal": "Cat"},\n                dqlx.Gt{"age": 3},\n            },\n        },\n    )\n    .ToDQL()\n')),(0,i.kt)("p",null,"All the ",(0,i.kt)("strong",{parentName:"p"},"values")," that are assigned to those filters will be replaced by a variable, thus making it ",(0,i.kt)("inlineCode",{parentName:"p"},"DQL Injection free")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query RootQuery($0: string,$1: string,$3: int, $4: string, $5: string, $6: int) {\n    rootQuery(func: has(name)) @filter( (eq(name,$0) AND eq(animal,$1) AND gt(age, $3)) OR (eq(name,$4) AND eq(animal,$5) AND gt(age, $6))) {\n        uid\n        name\n        animal\n    }\n}\n")),(0,i.kt)("h3",{id:"escaping-predicates"},"Escaping Predicates"),(0,i.kt)("p",null,"From version ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.2")," ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," achieve maximum security by parsing and escaping all the predicates within the query."),(0,i.kt)("p",null,"In dql when you surround a predicate with ",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),", Dgraph will escape any special character as well as treat that expression exclusively as a predicate and will not execute any keyword within it."),(0,i.kt)("p",null,"For instance if we write this ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'query, variables, err := db.Query(dqlx.HasFn("name")).\n    Select(`\n        uid\n        name\n        animal\n        breed\n    `).\n    Filter(\n        dqlx.Eq("animal", "Cat"),\n        dqlx.Eq("animal", "Dog"),\n    )\n    .ToDQL()\n')),(0,i.kt)("p",null,"you'll get:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query RootQuery($0:string, $1:int, $2:int) {\n    <rootQuery>(func: eq(<name>,$0)) @filter(eq(<animal>,$1) AND eq(<animal>, $2)) {\n        <uid>\n        <name>\n        <animal>\n        <breed>\n    }\n}\n")),(0,i.kt)("p",null,"even if you intentionally want to expose yourself to an attacker doing something along this line (and not validating the input):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'filterHas := req.Params("filterHas")\n\ndb.Query(dqlx.HasFn(filterHas)).\n    Select("uid")\n')),(0,i.kt)("p",null,"The attacker might only able to play around that 1 field that you gave access to,\nbut he will not be able to exploit the query in any way, for example sending some dodgy input to try to customise the query"),(0,i.kt)("h3",{id:"be-careful"},"Be Careful!"),(0,i.kt)("p",null,"Yes, ",(0,i.kt)("strong",{parentName:"p"},"dqlx")," is very safe by default, but of course you can make it unsafe if you don't stick to the rules."),(0,i.kt)("p",null,"In short, in the whole library there is 1 single function ",(0,i.kt)("inlineCode",{parentName:"p"},"Expr")," that allows you to write ",(0,i.kt)("inlineCode",{parentName:"p"},"raw")," parts of the query\nand it will get concatenated as is."),(0,i.kt)("p",null,"If you expose that function to a ",(0,i.kt)("strong",{parentName:"p"},"user input")," you are subjected to DQL injection.\nHandle it with care."),(0,i.kt)("p",null,"Secondly I always recommend to never trust inputs and always validate what you get from the internet."),(0,i.kt)("h2",{id:"reporting-vulnerabilities"},"Reporting Vulnerabilities"),(0,i.kt)("p",null,"In case of a security vulnerability contact me directly via email at: ",(0,i.kt)("a",{parentName:"p",href:"mailto:fabri.feno@gmail.com"},"fabri.feno@gmail.com")),(0,i.kt)("p",null,"All security vulnerabilities will be promptly addressed"))}p.isMDXComponent=!0}}]);